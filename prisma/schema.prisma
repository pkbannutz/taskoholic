// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String?
  image            String?
  subscriptionTier String   @default("FREE")
  preferences      Json     @default("{}")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  tasks         Task[]
  habits        Habit[]
  notes         Note[]
  focusSessions FocusSession[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Task {
  id               String    @id @default(cuid())
  userId           String
  title            String
  status           String    @default("INBOX")
  priority         String    @default("MEDIUM")
  estimatedTime    Int?
  energyLevel      String?
  dueDate          DateTime?
  completedAt      DateTime?
  sprintsCompleted Int       @default(0)
  linkedGoalId     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  focusSessions FocusSession[]

  @@map("tasks")
}

model Habit {
  id                 String    @id @default(cuid())
  userId             String
  name               String
  frequency          String    @default("DAILY")
  currentStreak      Int       @default(0)
  longestStreak      Int       @default(0)
  lastCompleted      DateTime?
  linkedTimerDuration Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("habits")
}

model Note {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String
  tags        String[]
  notebookId  String?
  linkedTasks String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model FocusSession {
  id           String   @id @default(cuid())
  userId       String
  duration     Int
  soundscape   String   @default("SILENCE")
  completedAt  DateTime @default(now())
  linkedTaskId String?
  createdAt    DateTime @default(now())

  // Relations
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkedTask Task? @relation(fields: [linkedTaskId], references: [id], onDelete: SetNull)

  @@map("focus_sessions")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
